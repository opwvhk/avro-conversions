<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="https://www.schiphol.nl/avro-tools/tests" xmlns="https://www.schiphol.nl/avro-tools/tests"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <!-- Happy flow variations -->

    <xs:element name="GroupStructures">
        <xs:annotation>
            <xs:documentation>Please note that 'all' groups are quite restrictive compared to 'choice'/'sequence' groups:</xs:documentation>
            <xs:documentation>* they cannot be combined with 'choice'/'sequence' groups</xs:documentation>
	        <xs:documentation>* in xml schema 1.0, elements may only occur at most once</xs:documentation>
	        <xs:documentation>* in xml schema 1.0, you can only add individual elements (not other 'all' groups)</xs:documentation>
	        <xs:documentation>* in xml schema 1.0, you cannot add wildcards (e.g., 'any' elements)</xs:documentation>
        </xs:annotation>
        <xs:complexType>
	        <xs:annotation>
		        <xs:documentation>Record documentation is taken from the type if possible, from the element otherwise</xs:documentation>
	        </xs:annotation>
	        <xs:all>
		        <xs:element name="comment" minOccurs="0" type="xs:string">
			        <xs:annotation>
				        <xs:documentation>A comment describing the group; can be placed before or after it in the XML.</xs:documentation>
			        </xs:annotation>
		        </xs:element>
		        <xs:element name="group">
			        <xs:annotation>
				        <xs:documentation>This documents both the field and the record</xs:documentation>
			        </xs:annotation>
			        <xs:complexType>
				        <xs:sequence>
					        <xs:choice>
						        <xs:group ref="duo"/>
					        </xs:choice>
					        <xs:element name="Keep">
						        <xs:complexType>
							        <xs:sequence>
								        <xs:element name="value" type="xs:string"/>
							        </xs:sequence>
						        </xs:complexType>
					        </xs:element>
				        </xs:sequence>
			        </xs:complexType>
		        </xs:element>
	        </xs:all>
        </xs:complexType>
    </xs:element>
    <xs:group name="duo">
        <xs:sequence>
	        <!--suppress XmlDefaultAttributeValue -->
	        <xs:sequence minOccurs="1" maxOccurs="unbounded">
		        <xs:element name="one" type="xs:string"/>
		        <xs:element name="other" type="xs:string"/>
	        </xs:sequence>
        </xs:sequence>
    </xs:group>
    <xs:element name="AttributesAndAnnotationWithoutDocs">
        <xs:annotation>
            <xs:appinfo source="file://./testCases.xsd"/>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:int" use="required"/>
            <xs:attribute name="something">
                <xs:simpleType>
                    <xs:restriction base="xs:integer">
                        <xs:minInclusive value="0"/>
                        <xs:maxInclusive value="100"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="RepeatedNestedRecordWithOptionalField">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="ID" type="xs:string"/>
                <xs:element name="array" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="one" type="xs:string"/>
                            <xs:element name="two" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="ExtensionInSimpleContent">
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="xs:string">
                    <xs:attribute name="version" type="xs:string"/>
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="ExtensionInMixedComplexContent">
        <xs:complexType>
            <xs:complexContent mixed="true">
                <xs:extension base="nonEmptyString">
                    <xs:attribute name="version" type="xs:string"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="nonEmptyString">
        <xs:simpleContent>
	        <xs:restriction base="xs:string">
		        <xs:minLength value="1"/>
	        </xs:restriction>
        </xs:simpleContent>
    </xs:complexType>

	<xs:element name="RepeatedSequence">
		<xs:complexType>
			<xs:sequence>
				<xs:sequence maxOccurs="unbounded">
					<xs:element name="array1" type="named"/>
					<xs:element name="array2" type="named"/>
				</xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="RepeatedChoice">
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element name="value" type="stringContent"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="OptionalAll">
		<xs:complexType>
			<xs:all minOccurs="0">
				<xs:element name="value1" type="xs:string"/>
				<xs:element name="value2" type="xs:string"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="RepeatedGroup">
		<xs:complexType>
			<xs:group maxOccurs="unbounded" ref="singleElements"/>
		</xs:complexType>
	</xs:element>
	<xs:group name="singleElements">
		<xs:sequence>
			<xs:element name="one" type="xs:string"/>
			<xs:element name="two" type="xs:string" nillable="true"/>
		</xs:sequence>
	</xs:group>
	<xs:element name="RestrictionInSimpleContent">
		<xs:complexType>
			<xs:simpleContent>
				<xs:restriction base="stringContent">
					<xs:minLength value="10"/>
				</xs:restriction>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="RestrictionInComplexContent">
		<xs:complexType>
			<xs:complexContent>
				<xs:restriction base="named">
					<xs:sequence>
						<xs:element name="name">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:maxLength value="125"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:element>
					</xs:sequence>
				</xs:restriction>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="ExtensionWithElements">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="named">
					<xs:sequence>
						<xs:element name="field" type="xs:string"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="MixedExtensionWithElements">
		<xs:annotation>
			<xs:documentation>Note that the complexContent being mixed does not affect the outcome!</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent mixed="true">
				<xs:extension base="named">
					<xs:sequence>
						<xs:element name="field" type="xs:string"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="ExtensionOfComplexType">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="stringContent">
					<xs:attribute name="version" type="xs:string"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="named">
		<xs:sequence>
			<xs:element name="name" type="xs:string"/>
			<xs:element name="description" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="stringContent">
		<xs:simpleContent>
			<xs:extension base="xs:string"/>
		</xs:simpleContent>
	</xs:complexType>

	<xs:element name="Recursive">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="HoleInTheGround" type="RecursiveComplexType"/>
				<xs:element ref="Recursive"/>
				<xs:element name="WrappedStringArray">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Array" minOccurs="0" maxOccurs="unbounded">
								<!-- This element has the same name but a different type as the one below -->
								<xs:complexType>
									<xs:sequence>
										<xs:element ref="StringElement"/>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="WrappedNumberArray">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Array" minOccurs="0" maxOccurs="unbounded">
								<!-- This element has the same name but a different type as the one above -->
								<xs:complexType>
									<xs:sequence>
										<xs:element ref="NumberElement"/>
									</xs:sequence>
									<xs:attribute name="length" type="xs:int"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="RecursiveComplexType">
		<xs:sequence>
			<xs:element name="level" type="xs:int"/>
			<xs:element ref="RabbitHole"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="RabbitHole" type="RecursiveComplexType"/>
	<xs:element name="StringElement">
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="xs:string"/>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="NumberElement">
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="xs:int"/>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>

	<xs:element name="ClassNamesEdgeCases">
		<!--
		Possible cases:
		* Type name see "PlainType"
		* Element with type name (TypeName): add suffix
		* Element with toplevel element name: add suffix
		* Element without toplevel name: allow normal
		* 2nd element without toplevel name: add suffix
		-->
		<xs:complexType>
			<xs:sequence>
				<xs:element name="PlainType" type="TypeName"/>
				<xs:element name="AnotherType" type="TypeName"/>
				<xs:element name="TypeName">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="name" type="xs:string"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="ClassNamesEdgeCases">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="description" type="xs:string"/>
							<xs:element name="Normal">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="TheAnswer" type="xs:int"/>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="Normal">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="field1" type="xs:string"/>
							<xs:element name="field2" type="xs:string"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="TypeName">
		<xs:sequence>
			<xs:element name="Normal">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="field" type="xs:string"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="Duplicates">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="field1">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Duplicates">
								<xs:complexType>
									<xs:attribute name="count" type="xs:int"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="field2">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Duplicates">
								<xs:complexType>
									<xs:attribute name="count" type="xs:int"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="field3">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Duplicates">
								<xs:complexType>
									<xs:attribute name="count" type="xs:int"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="ArbitraryContent">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="StandardPayLoad" minOccurs="0">
					<xs:complexType>
						<xs:group ref="singleElements"/>
					</xs:complexType>
				</xs:element>
				<xs:any processContents="lax"/>
			</xs:sequence>
			<xs:attribute name="source" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="MixedComplexType">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Payload">
					<xs:complexType mixed="true">
						<xs:sequence>
							<!--suppress XmlDefaultAttributeValue -->
							<xs:element name="StandardPayLoad" minOccurs="1" maxOccurs="unbounded">
								<xs:complexType>
									<xs:group ref="singleElements"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="source" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>

	<xs:element name="DefaultValuesForFields">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="required" type="xs:string" default="abc"/>
				<xs:element name="optional" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="optimizedAway" type="xs:string" default="def"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="defaultToNull" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="optimizedAway" minOccurs="0" type="xs:string"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<!-- Default values for array items are ignored, as we don't know how many to instantiate (minOccurs is lost in translation to objects) -->
				<xs:element name="array" type="xs:string" minOccurs="0" maxOccurs="unbounded" default="nonsense "/>
			</xs:sequence>
			<xs:attribute name="req" type="xs:string" default="ghi" use="required"/>
			<xs:attribute name="opt" type="xs:string" default="jkl"/>
		</xs:complexType>
	</xs:element>

	<xs:element name="OptimizationsPossible">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="name" type="xs:string"/>
                <xs:element name="optionalArray" minOccurs="0">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="single" maxOccurs="unbounded" type="xs:string"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Keep">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="value" type="xs:string"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="wrappedString">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="maybe" type="xs:string" nillable="true"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="wrappedNumber">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="value" type="xs:int"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

	<!-- Unsupported structure variation(s) -->

	<xs:element name="ProhibitedAttribute">
		<xs:complexType>
			<xs:attribute name="id" type="xs:int" use="prohibited"/>
		</xs:complexType>
	</xs:element>

	<xs:element name="AbstractElement" abstract="true"/>

	<xs:element name="NameWithAlias" type="xs:string"/>
	<xs:element name="Alias" type="xs:string" substitutionGroup="NameWithAlias"/>

	<xs:element name="WithAnyAttribute">
		<xs:complexType>
			<xs:anyAttribute processContents="lax"/>
		</xs:complexType>
	</xs:element>

    <!-- "Scalar" type variations -->

    <xs:element name="list">
        <xs:simpleType>
            <xs:list itemType="xs:int"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="union">
        <xs:simpleType>
            <xs:union memberTypes="xs:int xs:string"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="nestedSimpleType">
        <xs:simpleType>
            <xs:restriction>
                <xs:simpleType>
                    <xs:restriction base="xs:int"/>
                </xs:simpleType>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>

    <xs:element name="uri">
        <xs:simpleType>
            <xs:restriction base="xs:anyURI"/>
        </xs:simpleType>
    </xs:element>

    <xs:element name="boolean">
        <xs:simpleType>
            <xs:restriction base="xs:boolean"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="int">
        <xs:simpleType>
            <xs:restriction base="xs:int"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="long">
        <xs:simpleType>
            <xs:restriction base="xs:long"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="float">
        <xs:simpleType>
            <xs:restriction base="xs:float"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="double">
        <xs:simpleType>
            <xs:restriction base="xs:double"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="string">
        <xs:simpleType>
            <xs:restriction base="xs:string"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="timestamp">
        <xs:simpleType>
            <xs:restriction base="xs:dateTime"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="date">
        <xs:simpleType>
            <xs:restriction base="xs:date"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="time">
        <xs:simpleType>
            <xs:restriction base="xs:time"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="unsupportedSimpleType">
        <xs:simpleType>
            <xs:restriction base="xs:gDay"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="unconstrainedDecimalAttribute">
        <xs:complexType>
            <xs:attribute name="value" type="xs:decimal"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="unconstrainedIntegerAttribute">
        <xs:complexType>
            <xs:attribute name="value" type="xs:integer"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="unconstrainedDecimal">
        <xs:simpleType>
            <xs:restriction base="xs:decimal"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="unboundedDecimal">
        <xs:simpleType>
            <xs:restriction base="xs:decimal">
                <xs:fractionDigits value="6"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="decimalBoundedByPrecision">
        <xs:simpleType>
            <xs:restriction base="xs:decimal">
                <xs:fractionDigits value="2"/>
                <xs:totalDigits value="4"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="decimalBoundedByLimits">
        <xs:simpleType>
            <xs:restriction base="xs:decimal">
                <xs:fractionDigits value="2"/>
                <xs:minInclusive value="0"/>
                <xs:maxInclusive value="1000000"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>

    <xs:element name="coercedToLong">
        <xs:simpleType>
            <xs:restriction base="xs:integer"/>
        </xs:simpleType>
    </xs:element>
    <xs:element name="integerWithFewDigits">
        <xs:simpleType>
            <xs:restriction base="xs:nonNegativeInteger">
                <xs:totalDigits value="3"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="integerWithSmallExclusiveBounds">
        <xs:simpleType>
            <xs:restriction base="xs:nonNegativeInteger">
                <xs:minExclusive value="10"/>
                <xs:maxExclusive value="100"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="integerWithSmallInclusiveBounds">
        <xs:simpleType>
            <xs:restriction base="xs:positiveInteger">
                <xs:minInclusive value="10"/>
                <xs:maxInclusive value="100"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="integerWithMediumDigits">
        <xs:simpleType>
            <xs:restriction base="xs:integer">
                <xs:totalDigits value="12"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="integerWithMediumBounds">
        <xs:simpleType>
            <xs:restriction base="xs:integer">
                <xs:minInclusive value="-2147483648"/>
                <!-- Just too large for an Integer -->
                <xs:maxInclusive value="2147483648"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="integerWithManyDigits">
        <xs:simpleType>
            <xs:restriction base="xs:integer">
                <xs:totalDigits value="20"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="integerWithLargeBounds">
        <xs:simpleType>
            <xs:restriction base="xs:integer">
                <xs:minInclusive value="-9223372036854775808"/>
                <!-- Just too large for a Long -->
                <xs:maxInclusive value="9223372036854775808"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>

	<xs:element name="enumeration">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:enumeration value="NONE"/>
				<xs:enumeration value="BICYCLE"/>
				<xs:enumeration value="BUS"/>
				<xs:enumeration value="TRAIN"/>
				<xs:enumeration value="CAR"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>

	<xs:element name="hexEncodedBinary">
		<xs:simpleType>
			<xs:restriction base="xs:hexBinary"/>
		</xs:simpleType>
	</xs:element>
	<xs:element name="base64EncodedBinary">
		<xs:simpleType>
			<xs:restriction base="xs:base64Binary"/>
		</xs:simpleType>
	</xs:element>
</xs:schema>
